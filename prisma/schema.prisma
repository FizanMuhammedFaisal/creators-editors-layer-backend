generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model submissions {
  id                          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id                String?     @db.Uuid
  uploader_id                 String?     @db.Uuid
  title                       String
  description                 String?
  video_url                   String
  thumbnail_url               String
  original_video_filename     String?
  original_thumbnail_filename String?
  youtube_video_id            String?
  upload_status               String?     @default("pending")
  status                      String?     @default("pending")
  submitted_at                DateTime?   @default(now()) @db.Timestamp(6)
  approved_at                 DateTime?   @db.Timestamp(6)
  uploaded_to_youtube_at      DateTime?   @db.Timestamp(6)
  users                       users?      @relation(fields: [uploader_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workspaces                  workspaces? @relation(fields: [workspace_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                    String              @id @db.Uuid
  email                 String              @unique
  role                  String?
  youtube_channel_id    String?
  youtube_access_token  String?
  youtube_refresh_token String?
  created_at            DateTime?           @default(now()) @db.Timestamp(6)
  submissions           submissions[]
  workspace_members     workspace_members[]
  workspaces            workspaces[]
}

model workspace_members {
  workspace_id String     @db.Uuid
  user_id      String     @db.Uuid
  joined_at    DateTime?  @default(now()) @db.Timestamp(6)
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workspaces   workspaces @relation(fields: [workspace_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([workspace_id, user_id])
}

model workspaces {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  creator_id        String?             @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  submissions       submissions[]
  workspace_members workspace_members[]
  users             users?              @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
